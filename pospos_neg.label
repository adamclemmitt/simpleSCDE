#' Label a group of cells positive or negative for a single gene based on a user-defined number of hits
#'
#' @param df A data frame
#' @param rowname The name of the gene(row) to be measured for hits in provided cells
#' @param x The minimum number of hits required to label a cell positive for the expression of a particular gene
#' @param x.limit The maximum number of hits of the gene defined by \code{rowname} that is allowed to be present in a negative cell
#' @param posname The string to label cells that are determined to be positive
#' @param negname The string to label cells that are determined to be negative
#' @return A named character vector that contains \code{posname}, \code{negname}, and "NA" labels for each cell
#' @examples
#' pos_neg.label(df = planaria_cells, rowname = "dd_Smed_v4_12111_0_1", x = 100, x.limit = 10, posname = "slit_pos", negname = "slit_neg")
pospos_neg.label <- function(df, rowname.x1, rowname.x2, x1 = 100, x2 = 100, x1.limit = 0, x2.limit = 0, 
                             posname = "pos", negname = "neg") {
  # Make sure inputs are valid
  if (is.null(df)) {
    return ("Please assign df to a valid data frame.")
  }
  # Find the row number that contains the specified gene name
  rownumb.x1 <- 0
  rownumb.x2 <- 0
  row.names <- rownames(df)
  for (i in 1:nrow(df)) {
    if (rownames(df)[i] == rowname.x1) {
      rownumb.x1 <- append(output, i)
    }
    if (rownames(df)[i] == rowname.x2) {
      rownumb.x2 <- append(output, i)
    }
  }
  if (rownumb.x1 == 0 || rownumb.x2 == 0) {
    stop("One of the four row names inputted not found. Both row names entered must be valid.")
  }
  # Label each cell positive or negative based on hits of specified genes
  output <- c()
  for (j in 1:ncol(df)) {
    if (df[[rownumb.x1, j]] >= x1 && df[[rownumb.x2, j]] >= x2) {
      output <- append(output, posname)
    } else if (df[[rownumb.x1, j]] >= x1.limit && df[[rownumb.x2, j]] >= x2.limit) {
      output <- append(output, negname)
    } else {
      output <- append(output, "NA")
    }
  }
  names(output) <- colnames(df)
  return(output)
}
